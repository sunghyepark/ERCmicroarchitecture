!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BOOST	makefile	/^BOOST   	= \/tool\/cpplib\/boost\/install\/1.67.0$/;"	m
BasisGate	QASMparser.h	/^	class BasisGate {$/;"	c	class:QASMparser
CFLAGS	makefile	/^CFLAGS = -std=c++11 -static-libstdc++ -O3 -fopenmp -fpermissive -DNDEBUG -DIL_STD -pg -Wno-ctor-dtor-privacy $(LIBINCLUDE)$/;"	m
CMeasure	mymeasure.h	/^		CMeasure() {$/;"	f	class:CMeasure
CMeasure	mymeasure.h	/^class CMeasure {$/;"	c
CNOT	circuit.h	/^        U, RX, RZ, CNOT, X, Y, Z, H, S, SDG, T, TDG$/;"	m	class:Qcircuit::GATETYPE
CXX	makefile	/^CXX = g++$/;"	m
CXXOPTS	makefile	/^CXXOPTS = -m64 -O3 -fopenmp -fPIC -fno-strict-aliasing -fexceptions -fpermissive -DNDEBUG -DIL_STD -Wno-ctor-dtor-privacy$/;"	m
CXgate	QASMparser.h	/^		CXgate(std::string control, std::string target) {$/;"	f	class:QASMparser::CXgate
CXgate	QASMparser.h	/^	class CXgate : public BasisGate {$/;"	c	class:QASMparser
Circuit	circuit.h	/^    struct Circuit$/;"	s	namespace:Qcircuit
Circuit_Mapping	mapping.cpp	/^void Qcircuit::QMapper::Circuit_Mapping(Circuit& dgraph)$/;"	f	class:Qcircuit::QMapper
CompoundGate	QASMparser.h	/^	class CompoundGate {$/;"	c	class:QASMparser
DEBUG_PARSER	parser.cpp	10;"	d	file:
Dgraph	circuit.h	/^            Circuit Dgraph;$/;"	m	class:Qcircuit::QMapper
Dlist_all	circuit.h	/^            vector<list<int> > Dlist_all;$/;"	m	class:Qcircuit::QMapper
EXE	makefile	/^EXE = ERCdecoder$/;"	m
Edge	circuit.h	/^    struct Edge$/;"	s	namespace:Qcircuit
Edge	graph.cpp	/^Qcircuit::Edge::Edge() { }$/;"	f	class:Qcircuit::Edge
Edge	graph.cpp	/^Qcircuit::Edge::Edge(Node* source, Node* target, int weight) $/;"	f	class:Qcircuit::Edge
ExecuteCommand	run.py	/^def ExecuteCommand( curBench, result, time_limit):$/;"	f
Expr	QASMparser.h	/^		Expr(Kind kind,  Expr* op1, Expr* op2, double num, std::string id) {$/;"	f	class:QASMparser::Expr
Expr	QASMparser.h	/^		Expr(const Expr& expr) {$/;"	f	class:QASMparser::Expr
Expr	QASMparser.h	/^	class Expr {$/;"	c	class:QASMparser
FinalCircuit	circuit.h	/^            Circuit FinalCircuit; \/\/final quantum circuit$/;"	m	class:Qcircuit::QMapper
FinalCircuit_info	outputwriter.cpp	/^void Qcircuit::QMapper::FinalCircuit_info(Circuit& graph)$/;"	f	class:Qcircuit::QMapper
FindTCAD	run.py	/^def FindTCAD( name ):$/;"	f
GATETYPE	circuit.h	/^    enum class GATETYPE$/;"	c	namespace:Qcircuit
Gate	circuit.h	/^    struct Gate$/;"	s	namespace:Qcircuit
Graph	circuit.h	/^    struct Graph$/;"	s	namespace:Qcircuit
Graph	graph.cpp	/^Qcircuit::Graph::Graph()$/;"	f	class:Qcircuit::Graph
H	circuit.h	/^        U, RX, RZ, CNOT, X, Y, Z, H, S, SDG, T, TDG$/;"	m	class:Qcircuit::GATETYPE
Kind	QASMparser.h	/^		enum class Kind {number, plus, minus, sign, times, sin, cos, tan, exp, ln, sqrt, div, power, id};$/;"	c	class:QASMparser::Expr
Kind	QASMtoken.hpp	/^	enum class Kind {include, none, identifier, number, plus, semicolon, eof, lpar, rpar, lbrack, rbrack, lbrace, rbrace, comma, minus, times, nninteger, real, qreg, creg, ugate, rxgate, rzgate, cxgate, gate, pi, measure, openqasm, probabilities, sin, cos, tan, exp, ln, sqrt, div, power, string, gt, barrier, opaque, _if, eq, reset, snapshot};$/;"	c	class:Token
KindNames	QASMtoken.cpp	/^std::map<Token::Kind, std::string> Token::KindNames = {$/;"	m	class:Token	file:
KindNames	QASMtoken.hpp	/^	static std::map<Kind, std::string> KindNames;$/;"	m	class:Token
LIBFORMAT	makefile	/^LIBFORMAT = static_pic$/;"	m
LIBGOMP	makefile	/^LIBGOMP 	= -L\/tool\/gcc\/install\/5.4.0\/lib64\/libgomp.a -static$/;"	m
LIBINCLUDE	makefile	/^LIBINCLUDE = -I$(SRCHASH)\/include -I$(BOOST)\/include$/;"	m
LINKCFLAGS	makefile	/^LINKCFLAGS = $(CFLAGS) -static-libstdc++ -lX11 -ldl -lm -lpthread#$(LIBGOMP)$/;"	m
LineInfo	QASMscanner.hpp	/^    	LineInfo(char ch, int line, int col) {$/;"	f	class:QASMscanner::LineInfo
LineInfo	QASMscanner.hpp	/^    class LineInfo {$/;"	c	class:QASMscanner
MYMEASURE_H	mymeasure.h	18;"	d
Node	circuit.h	/^    struct Node$/;"	s	namespace:Qcircuit
Node	graph.cpp	/^Qcircuit::Node::Node() { }$/;"	f	class:Qcircuit::Node
Node	graph.cpp	/^Qcircuit::Node::Node(int weight) : weight(weight) { id = global_id++; }$/;"	f	class:Qcircuit::Node
OBJECT	makefile	/^OBJECT = ..\/build$/;"	m
PRINT_NODE	parser.cpp	9;"	d	file:
PRINT_OPTION	parser.cpp	8;"	d	file:
Parse	QASMparser.cpp	/^void QASMparser::Parse() {$/;"	f	class:QASMparser
ParseLog	run.py	/^def ParseLog( logPath ):$/;"	f
QASMSCANNER_HPP_	QASMscanner.hpp	11;"	d
QASM_SIMULATOR_H_	QASMparser.h	11;"	d
QASM_parse	parser.cpp	/^void Qcircuit::QMapper::QASM_parse(string filename)$/;"	f	class:Qcircuit::QMapper
QASMargsList	QASMparser.cpp	/^void QASMparser::QASMargsList(std::vector<std::pair<int, int> >& arguments) {$/;"	f	class:QASMparser
QASMargumentCreg	QASMparser.cpp	/^std::pair<std::string, int> QASMparser::QASMargumentCreg() {$/;"	f	class:QASMparser
QASMargumentQreg	QASMparser.cpp	/^std::pair<int, int> QASMparser::QASMargumentQreg() {$/;"	f	class:QASMparser
QASMexp	QASMparser.cpp	/^QASMparser::Expr* QASMparser::QASMexp() {$/;"	f	class:QASMparser
QASMexpList	QASMparser.cpp	/^void QASMparser::QASMexpList(std::vector<Expr*>& expressions) {$/;"	f	class:QASMparser
QASMexponentiation	QASMparser.cpp	/^QASMparser::Expr* QASMparser::QASMexponentiation() {$/;"	f	class:QASMparser
QASMfactor	QASMparser.cpp	/^QASMparser::Expr* QASMparser::QASMfactor() {$/;"	f	class:QASMparser
QASMgate	QASMparser.cpp	/^void QASMparser::QASMgate(bool execute) {$/;"	f	class:QASMparser
QASMgateDecl	QASMparser.cpp	/^void QASMparser::QASMgateDecl() {$/;"	f	class:QASMparser
QASMidList	QASMparser.cpp	/^void QASMparser::QASMidList(std::vector<std::string>& identifiers) {$/;"	f	class:QASMparser
QASMopaqueGateDecl	QASMparser.cpp	/^void QASMparser::QASMopaqueGateDecl() {$/;"	f	class:QASMparser
QASMparser	QASMparser.cpp	/^QASMparser::QASMparser(std::string filename) {$/;"	f	class:QASMparser
QASMparser	QASMparser.h	/^class QASMparser {$/;"	c
QASMqop	QASMparser.cpp	/^void QASMparser::QASMqop(bool execute) {$/;"	f	class:QASMparser
QASMscanner	QASMscanner.cpp	/^QASMscanner::QASMscanner(std::istream& in_stream) : in(in_stream) {$/;"	f	class:QASMscanner
QASMscanner	QASMscanner.hpp	/^class QASMscanner {$/;"	c
QASMterm	QASMparser.cpp	/^QASMparser::Expr* QASMparser::QASMterm() {$/;"	f	class:QASMparser
QMapper	circuit.h	/^    class QMapper$/;"	c	namespace:Qcircuit
Qcircuit	circuit.h	/^namespace Qcircuit$/;"	n
RESULT	run.py	/^RESULT =(   ("4mod5-v1_22"      , 0         , 0     ),$/;"	v
RESULT_I	run.py	/^RESULT_I =( ("4mod5-v1_22"      , 18        , 0     ),$/;"	v
RESULT_IR	run.py	/^RESULT_IR =(("4mod5-v1_22"      , 15        , 0     ),$/;"	v
RESULT_OP	run.py	/^RESULT_OP =(("4mod5-v1_22"      , 0         , 0     ),$/;"	v
RESULT_RR	run.py	/^RESULT_RR =(("4mod5-v1_22"      , 0         , 0     ),$/;"	v
RX	circuit.h	/^        U, RX, RZ, CNOT, X, Y, Z, H, S, SDG, T, TDG$/;"	m	class:Qcircuit::GATETYPE
RXgate	QASMparser.h	/^		RXgate(Expr* theta, Expr* phi, Expr* lambda, std::string target) {$/;"	f	class:QASMparser::RXgate
RXgate	QASMparser.h	/^    class RXgate : public BasisGate {$/;"	c	class:QASMparser
RZ	circuit.h	/^        U, RX, RZ, CNOT, X, Y, Z, H, S, SDG, T, TDG$/;"	m	class:Qcircuit::GATETYPE
RZgate	QASMparser.h	/^		RZgate(Expr* theta, Expr* phi, Expr* lambda, std::string target) {$/;"	f	class:QASMparser::RZgate
RZgate	QASMparser.h	/^    class RZgate : public BasisGate {$/;"	c	class:QASMparser
RewriteExpr	QASMparser.cpp	/^QASMparser::Expr* QASMparser::RewriteExpr(Expr* expr, std::map<std::string, Expr*>& exprMap) {$/;"	f	class:QASMparser
RunCommand	run.py	/^def RunCommand(exeStr, time_limit):$/;"	f
S	circuit.h	/^        U, RX, RZ, CNOT, X, Y, Z, H, S, SDG, T, TDG$/;"	m	class:Qcircuit::GATETYPE
SDG	circuit.h	/^        U, RX, RZ, CNOT, X, Y, Z, H, S, SDG, T, TDG$/;"	m	class:Qcircuit::GATETYPE
SRC	makefile	/^SRC = 	$(OBJECT)\/main.o \\$/;"	m
SRCHASH	makefile	/^SRCHASH 	= \/tool\/cpplib\/sparsehash\/install$/;"	m
SYSTEM	makefile	/^SYSTEM = x86-64_linux$/;"	m
Snapshot	QASMparser.h	/^	class Snapshot {$/;"	c	class:QASMparser
T	circuit.h	/^        U, RX, RZ, CNOT, X, Y, Z, H, S, SDG, T, TDG$/;"	m	class:Qcircuit::GATETYPE
TOKEN_H_	QASMtoken.hpp	11;"	d
Token	QASMtoken.hpp	/^	Token() : Token(Kind::none, 0, 0) {$/;"	f	class:Token
Token	QASMtoken.hpp	/^	Token(Kind kind, int line, int col) {$/;"	f	class:Token
Token	QASMtoken.hpp	/^class Token {$/;"	c
U	circuit.h	/^        U, RX, RZ, CNOT, X, Y, Z, H, S, SDG, T, TDG$/;"	m	class:Qcircuit::GATETYPE
Ugate	QASMparser.h	/^		Ugate(Expr* theta, Expr* phi, Expr* lambda, std::string target) {$/;"	f	class:QASMparser::Ugate
Ugate	QASMparser.h	/^	class Ugate : public BasisGate {$/;"	c	class:QASMparser
X	circuit.h	/^        U, RX, RZ, CNOT, X, Y, Z, H, S, SDG, T, TDG$/;"	m	class:Qcircuit::GATETYPE
Y	circuit.h	/^        U, RX, RZ, CNOT, X, Y, Z, H, S, SDG, T, TDG$/;"	m	class:Qcircuit::GATETYPE
Z	circuit.h	/^        U, RX, RZ, CNOT, X, Y, Z, H, S, SDG, T, TDG$/;"	m	class:Qcircuit::GATETYPE
__CIRCUIT__	circuit.h	10;"	d
_if	QASMtoken.hpp	/^	enum class Kind {include, none, identifier, number, plus, semicolon, eof, lpar, rpar, lbrack, rbrack, lbrace, rbrace, comma, minus, times, nninteger, real, qreg, creg, ugate, rxgate, rzgate, cxgate, gate, pi, measure, openqasm, probabilities, sin, cos, tan, exp, ln, sqrt, div, power, string, gt, barrier, opaque, _if, eq, reset, snapshot};$/;"	m	class:Token::Kind
accm_clock_end	mymeasure.cpp	/^void CMeasure::accm_clock_end(string task) {$/;"	f	class:CMeasure
accm_clock_print	mymeasure.cpp	/^void CMeasure::accm_clock_print(string task) {$/;"	f	class:CMeasure
accm_clock_start	mymeasure.cpp	/^void CMeasure::accm_clock_start(string task) {$/;"	f	class:CMeasure
addCXgate	QASMparser.cpp	/^void QASMparser::addCXgate(int target, int control) {$/;"	f	class:QASMparser
addFileInput	QASMscanner.cpp	/^void QASMscanner::addFileInput(std::string fname) {$/;"	f	class:QASMscanner
addRXgate	QASMparser.cpp	/^void QASMparser::addRXgate(int target, double theta, double phi, double lambda) {$/;"	f	class:QASMparser
addRZgate	QASMparser.cpp	/^void QASMparser::addRZgate(int target, double theta, double phi, double lambda) {$/;"	f	class:QASMparser
addUgate	QASMparser.cpp	/^void QASMparser::addUgate(int target, double theta, double phi, double lambda) {$/;"	f	class:QASMparser
addedge	graph.cpp	/^bool Qcircuit::Graph::addedge(int source, int target, int weight)$/;"	f	class:Qcircuit::Graph
addnode	graph.cpp	/^int Qcircuit::Graph::addnode(int weight)$/;"	f	class:Qcircuit::Graph
args	run.py	/^                    args=(curBench, results, 50))$/;"	v
argumentNames	QASMparser.h	/^		std::vector<std::string> argumentNames;$/;"	m	class:QASMparser::CompoundGate
avg	run.py	/^        avg = round(int(s4) \/ int(s2), 6)$/;"	v
avg_improve	run.py	/^avg_improve = round(sum(avg_set)\/len(avg_set), 6)$/;"	v
avg_set	run.py	/^avg_set = []$/;"	v
barrier	QASMtoken.hpp	/^	enum class Kind {include, none, identifier, number, plus, semicolon, eof, lpar, rpar, lbrack, rbrack, lbrace, rbrace, comma, minus, times, nninteger, real, qreg, creg, ugate, rxgate, rzgate, cxgate, gate, pi, measure, openqasm, probabilities, sin, cos, tan, exp, ln, sqrt, div, power, string, gt, barrier, opaque, _if, eq, reset, snapshot};$/;"	m	class:Token::Kind
benchDir	run.py	/^benchDir = sorted(os.listdir(dirpos))$/;"	v
benchlist	run.py	/^        benchlist = benchlist_dir$/;"	v
benchlist	run.py	/^benchlist = []$/;"	v
benchlist_dir	run.py	/^benchlist_dir = []$/;"	v
benchlist_initial	run.py	/^benchlist_initial = ["qft_13.qasm", "qft_20.qasm", "adr4_197.qasm", "z4_268.qasm",$/;"	v
benchresult	run.py	/^    benchresult = results[:]$/;"	v
benchresult	run.py	/^benchresult = []$/;"	v
benchresult	run.py	/^benchresult = sorted(benchresult, key=lambda row: row[0][0])$/;"	v
beta_list	run.py	/^beta_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]$/;"	v
binaryName	run.py	/^binaryName = ".\/ERCdecoder"$/;"	v
cbegin	mymeasure.h	/^		clock_t				cbegin;$/;"	m	class:CMeasure
celapsed_secs	mymeasure.h	/^        vector<double>      welapsed_secs, celapsed_secs;$/;"	m	class:CMeasure
center	circuit.h	/^        int center;$/;"	m	struct:Qcircuit::Graph
ch	QASMscanner.hpp	/^  	char ch;$/;"	m	class:QASMscanner
ch	QASMscanner.hpp	/^    	char ch;$/;"	m	class:QASMscanner::LineInfo
check	QASMparser.cpp	/^void QASMparser::check(Token::Kind expected) {$/;"	f	class:QASMparser
col	QASMscanner.hpp	/^    	int line, col;$/;"	m	class:QASMscanner::LineInfo
col	QASMscanner.hpp	/^    int col;$/;"	m	class:QASMscanner
col	QASMtoken.hpp	/^	int col;$/;"	m	class:Token
comma	QASMtoken.hpp	/^	enum class Kind {include, none, identifier, number, plus, semicolon, eof, lpar, rpar, lbrack, rbrack, lbrace, rbrace, comma, minus, times, nninteger, real, qreg, creg, ugate, rxgate, rzgate, cxgate, gate, pi, measure, openqasm, probabilities, sin, cos, tan, exp, ln, sqrt, div, power, string, gt, barrier, opaque, _if, eq, reset, snapshot};$/;"	m	class:Token::Kind
compoundGates	QASMparser.h	/^	std::map<std::string, CompoundGate> compoundGates;$/;"	m	class:QASMparser
control	QASMparser.h	/^		std::string control;$/;"	m	class:QASMparser::CXgate
control	circuit.h	/^        int control, target;                \/\/logical qubits \/\/if single qubit control = -1$/;"	m	struct:Qcircuit::Gate
cos	QASMparser.h	/^		enum class Kind {number, plus, minus, sign, times, sin, cos, tan, exp, ln, sqrt, div, power, id};$/;"	m	class:QASMparser::Expr::Kind
cos	QASMtoken.hpp	/^	enum class Kind {include, none, identifier, number, plus, semicolon, eof, lpar, rpar, lbrack, rbrack, lbrace, rbrace, comma, minus, times, nninteger, real, qreg, creg, ugate, rxgate, rzgate, cxgate, gate, pi, measure, openqasm, probabilities, sin, cos, tan, exp, ln, sqrt, div, power, string, gt, barrier, opaque, _if, eq, reset, snapshot};$/;"	m	class:Token::Kind
cost_weight_table	circuit.h	/^            vector<double> cost_weight_table;$/;"	m	class:Qcircuit::QMapper
creg	QASMtoken.hpp	/^	enum class Kind {include, none, identifier, number, plus, semicolon, eof, lpar, rpar, lbrack, rbrack, lbrace, rbrace, comma, minus, times, nninteger, real, qreg, creg, ugate, rxgate, rzgate, cxgate, gate, pi, measure, openqasm, probabilities, sin, cos, tan, exp, ln, sqrt, div, power, string, gt, barrier, opaque, _if, eq, reset, snapshot};$/;"	m	class:Token::Kind
cregs	QASMparser.h	/^	std::map<std::string, std::pair<int, int*> > cregs;$/;"	m	class:QASMparser
curTime	run.py	/^curTime = datetime.now().strftime('%m_%d_%H_%M')$/;"	v
cxgate	QASMtoken.hpp	/^	enum class Kind {include, none, identifier, number, plus, semicolon, eof, lpar, rpar, lbrack, rbrack, lbrace, rbrace, comma, minus, times, nninteger, real, qreg, creg, ugate, rxgate, rzgate, cxgate, gate, pi, measure, openqasm, probabilities, sin, cos, tan, exp, ln, sqrt, div, power, string, gt, barrier, opaque, _if, eq, reset, snapshot};$/;"	m	class:Token::Kind
degree	circuit.h	/^        int** degree;$/;"	m	struct:Qcircuit::Graph
degreeN	circuit.h	/^        int* degreeN;$/;"	m	struct:Qcircuit::Graph
deleteedge	graph.cpp	/^bool Qcircuit::Graph::deleteedge(int id)$/;"	f	class:Qcircuit::Graph
deletenode	graph.cpp	/^bool Qcircuit::Graph::deletenode(int id)$/;"	f	class:Qcircuit::Graph
dirpos	run.py	/^dirpos = "..\/example"$/;"	v
dist	circuit.h	/^        int** dist;$/;"	m	struct:Qcircuit::Graph
div	QASMparser.h	/^		enum class Kind {number, plus, minus, sign, times, sin, cos, tan, exp, ln, sqrt, div, power, id};$/;"	m	class:QASMparser::Expr::Kind
div	QASMtoken.hpp	/^	enum class Kind {include, none, identifier, number, plus, semicolon, eof, lpar, rpar, lbrack, rbrack, lbrace, rbrace, comma, minus, times, nninteger, real, qreg, creg, ugate, rxgate, rzgate, cxgate, gate, pi, measure, openqasm, probabilities, sin, cos, tan, exp, ln, sqrt, div, power, string, gt, barrier, opaque, _if, eq, reset, snapshot};$/;"	m	class:Token::Kind
doubleDegreeN	circuit.h	/^        int* doubleDegreeN;$/;"	m	struct:Qcircuit::Graph
edges	circuit.h	/^        set<int> edges;$/;"	m	struct:Qcircuit::Node
edgeset	circuit.h	/^        map<int, Edge> edgeset;$/;"	m	struct:Qcircuit::Graph
elapse_time	mymeasure.cpp	/^double CMeasure::elapse_time()$/;"	f	class:CMeasure
eof	QASMtoken.hpp	/^	enum class Kind {include, none, identifier, number, plus, semicolon, eof, lpar, rpar, lbrack, rbrack, lbrace, rbrace, comma, minus, times, nninteger, real, qreg, creg, ugate, rxgate, rzgate, cxgate, gate, pi, measure, openqasm, probabilities, sin, cos, tan, exp, ln, sqrt, div, power, string, gt, barrier, opaque, _if, eq, reset, snapshot};$/;"	m	class:Token::Kind
eq	QASMtoken.hpp	/^	enum class Kind {include, none, identifier, number, plus, semicolon, eof, lpar, rpar, lbrack, rbrack, lbrace, rbrace, comma, minus, times, nninteger, real, qreg, creg, ugate, rxgate, rzgate, cxgate, gate, pi, measure, openqasm, probabilities, sin, cos, tan, exp, ln, sqrt, div, power, string, gt, barrier, opaque, _if, eq, reset, snapshot};$/;"	m	class:Token::Kind
exp	QASMparser.h	/^		enum class Kind {number, plus, minus, sign, times, sin, cos, tan, exp, ln, sqrt, div, power, id};$/;"	m	class:QASMparser::Expr::Kind
exp	QASMtoken.hpp	/^	enum class Kind {include, none, identifier, number, plus, semicolon, eof, lpar, rpar, lbrack, rbrack, lbrace, rbrace, comma, minus, times, nninteger, real, qreg, creg, ugate, rxgate, rzgate, cxgate, gate, pi, measure, openqasm, probabilities, sin, cos, tan, exp, ln, sqrt, div, power, string, gt, barrier, opaque, _if, eq, reset, snapshot};$/;"	m	class:Token::Kind
fatal	mymeasure.h	20;"	d
fileNameTrim	mymeasure.cpp	/^const char* fileNameTrim(const char * fileName)$/;"	f
fileName_input	circuit.h	/^            string fileName_input;$/;"	m	class:Qcircuit::QMapper
fileName_output	circuit.h	/^            string fileName_output;$/;"	m	class:Qcircuit::QMapper
fname	QASMparser.h	/^	std::string fname;$/;"	m	class:QASMparser
gate	QASMparser.h	/^    Qcircuit::Gate gate;$/;"	m	class:QASMparser
gate	QASMtoken.hpp	/^	enum class Kind {include, none, identifier, number, plus, semicolon, eof, lpar, rpar, lbrack, rbrack, lbrace, rbrace, comma, minus, times, nninteger, real, qreg, creg, ugate, rxgate, rzgate, cxgate, gate, pi, measure, openqasm, probabilities, sin, cos, tan, exp, ln, sqrt, div, power, string, gt, barrier, opaque, _if, eq, reset, snapshot};$/;"	m	class:Token::Kind
gatelistsL	QASMparser.h	/^	std::vector<Qcircuit::Gate> gatelistsL;$/;"	m	class:QASMparser
gates	QASMparser.h	/^		std::vector<BasisGate*> gates;$/;"	m	class:QASMparser::CompoundGate
getGatelists	QASMparser.h	/^    std::vector<Qcircuit::Gate> getGatelists() {$/;"	f	class:QASMparser
getNgates	QASMparser.h	/^    int getNgates() {$/;"	f	class:QASMparser
getNqubits	QASMparser.h	/^    int getNqubits() {$/;"	f	class:QASMparser
getdirList	run.py	/^def getdirList( ):$/;"	f
getglobalid	graph.cpp	/^int Qcircuit::Edge::getglobalid() { return global_id; }$/;"	f	class:Qcircuit::Edge
getglobalid	graph.cpp	/^int Qcircuit::Node::getglobalid() { return global_id; }$/;"	f	class:Qcircuit::Node
getid	graph.cpp	/^int Qcircuit::Edge::getid() { return id; }$/;"	f	class:Qcircuit::Edge
getid	graph.cpp	/^int Qcircuit::Node::getid() { return id; }$/;"	f	class:Qcircuit::Node
getsourceid	graph.cpp	/^int Qcircuit::Edge::getsourceid() { return source->getid(); }$/;"	f	class:Qcircuit::Edge
gettargetid	graph.cpp	/^int Qcircuit::Edge::gettargetid() { return target->getid(); }$/;"	f	class:Qcircuit::Edge
getweight	graph.cpp	/^int Qcircuit::Edge::getweight() { return weight; }$/;"	f	class:Qcircuit::Edge
getweight	graph.cpp	/^int Qcircuit::Node::getweight() { return weight; }$/;"	f	class:Qcircuit::Node
global_id	circuit.h	/^        static int global_id;$/;"	m	struct:Qcircuit::Edge
global_id	circuit.h	/^        static int global_id;$/;"	m	struct:Qcircuit::Node
global_id	graph.cpp	/^int Qcircuit::Edge::global_id = 0;$/;"	m	class:Qcircuit::Edge	file:
global_id	graph.cpp	/^int Qcircuit::Node::global_id = 0;$/;"	m	class:Qcircuit::Node	file:
gt	QASMtoken.hpp	/^	enum class Kind {include, none, identifier, number, plus, semicolon, eof, lpar, rpar, lbrack, rbrack, lbrace, rbrace, comma, minus, times, nninteger, real, qreg, creg, ugate, rxgate, rzgate, cxgate, gate, pi, measure, openqasm, probabilities, sin, cos, tan, exp, ln, sqrt, div, power, string, gt, barrier, opaque, _if, eq, reset, snapshot};$/;"	m	class:Token::Kind
id	QASMparser.h	/^		std::string id;$/;"	m	class:QASMparser::Expr
id	circuit.h	/^        int id; $/;"	m	struct:Qcircuit::Gate
id	circuit.h	/^        int id;$/;"	m	struct:Qcircuit::Edge
id	circuit.h	/^        int id;$/;"	m	struct:Qcircuit::Node
identifier	QASMtoken.hpp	/^	enum class Kind {include, none, identifier, number, plus, semicolon, eof, lpar, rpar, lbrack, rbrack, lbrace, rbrace, comma, minus, times, nninteger, real, qreg, creg, ugate, rxgate, rzgate, cxgate, gate, pi, measure, openqasm, probabilities, sin, cos, tan, exp, ln, sqrt, div, power, string, gt, barrier, opaque, _if, eq, reset, snapshot};$/;"	m	class:Token::Kind
in	QASMparser.h	/^  	std::istream* in;$/;"	m	class:QASMparser
in	QASMscanner.hpp	/^  	std::istream& in;$/;"	m	class:QASMscanner
include	QASMtoken.hpp	/^	enum class Kind {include, none, identifier, number, plus, semicolon, eof, lpar, rpar, lbrack, rbrack, lbrace, rbrace, comma, minus, times, nninteger, real, qreg, creg, ugate, rxgate, rzgate, cxgate, gate, pi, measure, openqasm, probabilities, sin, cos, tan, exp, ln, sqrt, div, power, string, gt, barrier, opaque, _if, eq, reset, snapshot};$/;"	m	class:Token::Kind
init_global_id	graph.cpp	/^void Qcircuit::Edge::init_global_id() { global_id = 0; }$/;"	f	class:Qcircuit::Edge
init_global_id	graph.cpp	/^void Qcircuit::Graph::init_global_id()$/;"	f	class:Qcircuit::Graph
init_global_id	graph.cpp	/^void Qcircuit::Node::init_global_id() { global_id = 0; }$/;"	f	class:Qcircuit::Node
initial_mapping	initial_mapping.cpp	/^void Qcircuit::QMapper::initial_mapping()$/;"	f	class:Qcircuit::QMapper
inputChk	mymeasure.h	/^		dense_hash_map<string, bool> inputChk;$/;"	m	class:CMeasure
keywords	QASMscanner.hpp	/^  	std::map<std::string, Token::Kind> keywords;$/;"	m	class:QASMscanner
kind	QASMparser.h	/^		Kind kind;$/;"	m	class:QASMparser::Expr
kind	QASMtoken.hpp	/^	Kind kind;$/;"	m	class:Token
la	QASMparser.h	/^	Token la,t;$/;"	m	class:QASMparser
lambda	QASMparser.h	/^		Expr* lambda;$/;"	m	class:QASMparser::RXgate
lambda	QASMparser.h	/^		Expr* lambda;$/;"	m	class:QASMparser::RZgate
lambda	QASMparser.h	/^		Expr* lambda;$/;"	m	class:QASMparser::Ugate
lbrace	QASMtoken.hpp	/^	enum class Kind {include, none, identifier, number, plus, semicolon, eof, lpar, rpar, lbrack, rbrack, lbrace, rbrace, comma, minus, times, nninteger, real, qreg, creg, ugate, rxgate, rzgate, cxgate, gate, pi, measure, openqasm, probabilities, sin, cos, tan, exp, ln, sqrt, div, power, string, gt, barrier, opaque, _if, eq, reset, snapshot};$/;"	m	class:Token::Kind
lbrack	QASMtoken.hpp	/^	enum class Kind {include, none, identifier, number, plus, semicolon, eof, lpar, rpar, lbrack, rbrack, lbrace, rbrace, comma, minus, times, nninteger, real, qreg, creg, ugate, rxgate, rzgate, cxgate, gate, pi, measure, openqasm, probabilities, sin, cos, tan, exp, ln, sqrt, div, power, string, gt, barrier, opaque, _if, eq, reset, snapshot};$/;"	m	class:Token::Kind
len	QASMparser.h	/^		unsigned long long len;$/;"	m	class:QASMparser::Snapshot
line	QASMscanner.hpp	/^  	int line;$/;"	m	class:QASMscanner
line	QASMscanner.hpp	/^    	int line, col;$/;"	m	class:QASMscanner::LineInfo
line	QASMtoken.hpp	/^	int line;$/;"	m	class:Token
lines	QASMscanner.hpp	/^  	std::stack<LineInfo> lines;$/;"	m	class:QASMscanner
ln	QASMparser.h	/^		enum class Kind {number, plus, minus, sign, times, sin, cos, tan, exp, ln, sqrt, div, power, id};$/;"	m	class:QASMparser::Expr::Kind
ln	QASMtoken.hpp	/^	enum class Kind {include, none, identifier, number, plus, semicolon, eof, lpar, rpar, lbrack, rbrack, lbrace, rbrace, comma, minus, times, nninteger, real, qreg, creg, ugate, rxgate, rzgate, cxgate, gate, pi, measure, openqasm, probabilities, sin, cos, tan, exp, ln, sqrt, div, power, string, gt, barrier, opaque, _if, eq, reset, snapshot};$/;"	m	class:Token::Kind
logi_qubits	QASMparser.h	/^    map<int, bool> logi_qubits;$/;"	m	class:QASMparser
logpos	run.py	/^logpos = "..\/log"$/;"	v
lpar	QASMtoken.hpp	/^	enum class Kind {include, none, identifier, number, plus, semicolon, eof, lpar, rpar, lbrack, rbrack, lbrace, rbrace, comma, minus, times, nninteger, real, qreg, creg, ugate, rxgate, rzgate, cxgate, gate, pi, measure, openqasm, probabilities, sin, cos, tan, exp, ln, sqrt, div, power, string, gt, barrier, opaque, _if, eq, reset, snapshot};$/;"	m	class:Token::Kind
main	main.cpp	/^int main(int argc, char** argv)$/;"	f
manager	run.py	/^        manager = mp.Manager()$/;"	v
measure	QASMtoken.hpp	/^	enum class Kind {include, none, identifier, number, plus, semicolon, eof, lpar, rpar, lbrack, rbrack, lbrace, rbrace, comma, minus, times, nninteger, real, qreg, creg, ugate, rxgate, rzgate, cxgate, gate, pi, measure, openqasm, probabilities, sin, cos, tan, exp, ln, sqrt, div, power, string, gt, barrier, opaque, _if, eq, reset, snapshot};$/;"	m	class:Token::Kind
measure	main.cpp	/^static CMeasure measure;$/;"	v	file:
minus	QASMparser.h	/^		enum class Kind {number, plus, minus, sign, times, sin, cos, tan, exp, ln, sqrt, div, power, id};$/;"	m	class:QASMparser::Expr::Kind
minus	QASMtoken.hpp	/^	enum class Kind {include, none, identifier, number, plus, semicolon, eof, lpar, rpar, lbrack, rbrack, lbrace, rbrace, comma, minus, times, nninteger, real, qreg, creg, ugate, rxgate, rzgate, cxgate, gate, pi, measure, openqasm, probabilities, sin, cos, tan, exp, ln, sqrt, div, power, string, gt, barrier, opaque, _if, eq, reset, snapshot};$/;"	m	class:Token::Kind
next	QASMscanner.cpp	/^Token QASMscanner::next() {$/;"	f	class:QASMscanner
nextCh	QASMscanner.cpp	/^void QASMscanner::nextCh() {$/;"	f	class:QASMscanner
ngates	QASMparser.h	/^    unsigned int ngates;$/;"	m	class:QASMparser
nninteger	QASMtoken.hpp	/^	enum class Kind {include, none, identifier, number, plus, semicolon, eof, lpar, rpar, lbrack, rbrack, lbrace, rbrace, comma, minus, times, nninteger, real, qreg, creg, ugate, rxgate, rzgate, cxgate, gate, pi, measure, openqasm, probabilities, sin, cos, tan, exp, ln, sqrt, div, power, string, gt, barrier, opaque, _if, eq, reset, snapshot};$/;"	m	class:Token::Kind
node_id	circuit.h	/^            int node_id;$/;"	m	class:Qcircuit::QMapper
node_print	print.cpp	/^void Qcircuit::QMapper::node_print(int N, Qcircuit::Circuit graph)$/;"	f	class:Qcircuit::QMapper
node_size	circuit.h	/^        int node_size;$/;"	m	struct:Qcircuit::Graph
nodeid	circuit.h	/^        map<int, int> nodeid;       \/\/table index <--> graph node id$/;"	m	struct:Qcircuit::Graph
nodeset	circuit.h	/^        map<int, Node> nodeset;$/;"	m	struct:Qcircuit::Graph
nodeset	circuit.h	/^        vector<Gate> nodeset;   \/* gate set *\/$/;"	m	struct:Qcircuit::Circuit
nodeset_out	print.cpp	/^void Qcircuit::QMapper::nodeset_out(ofstream &of, Qcircuit::Circuit graph)$/;"	f	class:Qcircuit::QMapper
none	QASMtoken.hpp	/^	enum class Kind {include, none, identifier, number, plus, semicolon, eof, lpar, rpar, lbrack, rbrack, lbrace, rbrace, comma, minus, times, nninteger, real, qreg, creg, ugate, rxgate, rzgate, cxgate, gate, pi, measure, openqasm, probabilities, sin, cos, tan, exp, ln, sqrt, div, power, string, gt, barrier, opaque, _if, eq, reset, snapshot};$/;"	m	class:Token::Kind
nqubits	QASMparser.h	/^	unsigned int nqubits;$/;"	m	class:QASMparser
nqubits	circuit.h	/^            unsigned int nqubits;   \/\/qubit quantity of quantum circuit (logical  qubits)$/;"	m	class:Qcircuit::QMapper
num	QASMparser.h	/^		double num;$/;"	m	class:QASMparser::Expr
num	run.py	/^            num = int(sys.argv[argnum])$/;"	v
number	QASMparser.h	/^		enum class Kind {number, plus, minus, sign, times, sin, cos, tan, exp, ln, sqrt, div, power, id};$/;"	m	class:QASMparser::Expr::Kind
number	QASMtoken.hpp	/^	enum class Kind {include, none, identifier, number, plus, semicolon, eof, lpar, rpar, lbrack, rbrack, lbrace, rbrace, comma, minus, times, nninteger, real, qreg, creg, ugate, rxgate, rzgate, cxgate, gate, pi, measure, openqasm, probabilities, sin, cos, tan, exp, ln, sqrt, div, power, string, gt, barrier, opaque, _if, eq, reset, snapshot};$/;"	m	class:Token::Kind
op1	QASMparser.h	/^		Expr* op1 = NULL;$/;"	m	class:QASMparser::Expr
op2	QASMparser.h	/^		Expr* op2 = NULL;$/;"	m	class:QASMparser::Expr
opaque	QASMparser.h	/^		bool opaque;$/;"	m	class:QASMparser::CompoundGate
opaque	QASMtoken.hpp	/^	enum class Kind {include, none, identifier, number, plus, semicolon, eof, lpar, rpar, lbrack, rbrack, lbrace, rbrace, comma, minus, times, nninteger, real, qreg, creg, ugate, rxgate, rzgate, cxgate, gate, pi, measure, openqasm, probabilities, sin, cos, tan, exp, ln, sqrt, div, power, string, gt, barrier, opaque, _if, eq, reset, snapshot};$/;"	m	class:Token::Kind
openqasm	QASMtoken.hpp	/^	enum class Kind {include, none, identifier, number, plus, semicolon, eof, lpar, rpar, lbrack, rbrack, lbrace, rbrace, comma, minus, times, nninteger, real, qreg, creg, ugate, rxgate, rzgate, cxgate, gate, pi, measure, openqasm, probabilities, sin, cos, tan, exp, ln, sqrt, div, power, string, gt, barrier, opaque, _if, eq, reset, snapshot};$/;"	m	class:Token::Kind
operator <<	circuit.h	/^inline ostream& operator << (ostream& os, Edge e)$/;"	f
operator <<	circuit.h	/^inline ostream& operator << (ostream& os, Graph graph)$/;"	f
operator <<	circuit.h	/^inline ostream& operator << (ostream& os, Node n)$/;"	f
operator <<	circuit.h	/^inline ostream& operator << (ostream& os, const GATETYPE& type)$/;"	f
operator <<	circuit.h	/^inline ostream& operator << (ostream& os, const Gate& gate)$/;"	f
operator <<	circuit.h	/^inline ostream& operator << (ostream& os, const list<int>& llist)$/;"	f
operator <<	circuit.h	/^inline ostream& operator << (ostream& os, const map<int, int>& m)$/;"	f
operator <<	circuit.h	/^inline ostream& operator << (ostream& os, const map<int, vector<int>>& edgemap)$/;"	f
operator <<	circuit.h	/^inline ostream& operator << (ostream& os, const queue<int> q)$/;"	f
operator <<	circuit.h	/^inline ostream& operator << (ostream& os, const vector<Gate>& nodeset)$/;"	f
operator <<	circuit.h	/^inline ostream& operator << (ostream& os, const vector<bool>& list)$/;"	f
operator <<	circuit.h	/^inline ostream& operator << (ostream& os, const vector<int>& list)$/;"	f
operator <<	circuit.h	/^inline ostream& operator << (ostream& os, const vector<list<int>>& list)$/;"	f
operator <<	circuit.h	/^inline ostream& operator << (ostream& os, const vector<pair<int, int> >& llist)$/;"	f
operator <<	circuit.h	/^inline ostream& operator << (ostream& os, const vector<vector<int>>& list)$/;"	f
operator <<	circuit.h	/^inline ostream& operator << (ostream& os, map<int, Edge> edgeset)$/;"	f
operator <<	circuit.h	/^inline ostream& operator << (ostream& os, map<int, Node> nodeset)$/;"	f
outpos	run.py	/^outpos = "..\/output"$/;"	v
output_type	circuit.h	/^        char output_type[128];$/;"	m	struct:Qcircuit::Gate
param_alpha	circuit.h	/^            double param_alpha;$/;"	m	class:Qcircuit::QMapper
param_beta	circuit.h	/^            int param_beta;$/;"	m	class:Qcircuit::QMapper
param_gamma	circuit.h	/^            int param_gamma;$/;"	m	class:Qcircuit::QMapper
parameterNames	QASMparser.h	/^		std::vector<std::string> parameterNames;$/;"	m	class:QASMparser::CompoundGate
parsing	parser.cpp	/^void Qcircuit::QMapper::parsing(int argc, char** argv)$/;"	f	class:Qcircuit::QMapper
phi	QASMparser.h	/^		Expr* phi;$/;"	m	class:QASMparser::RXgate
phi	QASMparser.h	/^		Expr* phi;$/;"	m	class:QASMparser::RZgate
phi	QASMparser.h	/^		Expr* phi;$/;"	m	class:QASMparser::Ugate
pi	QASMtoken.hpp	/^	enum class Kind {include, none, identifier, number, plus, semicolon, eof, lpar, rpar, lbrack, rbrack, lbrace, rbrace, comma, minus, times, nninteger, real, qreg, creg, ugate, rxgate, rzgate, cxgate, gate, pi, measure, openqasm, probabilities, sin, cos, tan, exp, ln, sqrt, div, power, string, gt, barrier, opaque, _if, eq, reset, snapshot};$/;"	m	class:Token::Kind
plus	QASMparser.h	/^		enum class Kind {number, plus, minus, sign, times, sin, cos, tan, exp, ln, sqrt, div, power, id};$/;"	m	class:QASMparser::Expr::Kind
plus	QASMtoken.hpp	/^	enum class Kind {include, none, identifier, number, plus, semicolon, eof, lpar, rpar, lbrack, rbrack, lbrace, rbrace, comma, minus, times, nninteger, real, qreg, creg, ugate, rxgate, rzgate, cxgate, gate, pi, measure, openqasm, probabilities, sin, cos, tan, exp, ln, sqrt, div, power, string, gt, barrier, opaque, _if, eq, reset, snapshot};$/;"	m	class:Token::Kind
positions	circuit.h	/^            unsigned int positions; \/\/qubit quantity of couping graph   (physical qubits)$/;"	m	class:Qcircuit::QMapper
power	QASMparser.h	/^		enum class Kind {number, plus, minus, sign, times, sin, cos, tan, exp, ln, sqrt, div, power, id};$/;"	m	class:QASMparser::Expr::Kind
power	QASMtoken.hpp	/^	enum class Kind {include, none, identifier, number, plus, semicolon, eof, lpar, rpar, lbrack, rbrack, lbrace, rbrace, comma, minus, times, nninteger, real, qreg, creg, ugate, rxgate, rzgate, cxgate, gate, pi, measure, openqasm, probabilities, sin, cos, tan, exp, ln, sqrt, div, power, string, gt, barrier, opaque, _if, eq, reset, snapshot};$/;"	m	class:Token::Kind
printExpr	QASMparser.cpp	/^void QASMparser::printExpr(Expr* expr) {$/;"	f	class:QASMparser
printMemoryUsage	mymeasure.cpp	/^void CMeasure::printMemoryUsage(void)$/;"	f	class:CMeasure
print_clock	mymeasure.cpp	/^void CMeasure::print_clock(){$/;"	f	class:CMeasure
print_only	mymeasure.cpp	/^void CMeasure::print_only(string task) {$/;"	f	class:CMeasure
probabilities	QASMparser.h	/^		double* probabilities;$/;"	m	class:QASMparser::Snapshot
probabilities	QASMtoken.hpp	/^	enum class Kind {include, none, identifier, number, plus, semicolon, eof, lpar, rpar, lbrack, rbrack, lbrace, rbrace, comma, minus, times, nninteger, real, qreg, creg, ugate, rxgate, rzgate, cxgate, gate, pi, measure, openqasm, probabilities, sin, cos, tan, exp, ln, sqrt, div, power, string, gt, barrier, opaque, _if, eq, reset, snapshot};$/;"	m	class:Token::Kind
probabilities_ket	QASMparser.h	/^		std::map<std::string, double> probabilities_ket;$/;"	m	class:QASMparser::Snapshot
proc	run.py	/^            proc = mp.Process(target=ExecuteCommand,$/;"	v
process_mem_usage	mymeasure.cpp	/^void CMeasure::process_mem_usage(){$/;"	f	class:CMeasure
procs	run.py	/^        procs = []$/;"	v
qreg	QASMtoken.hpp	/^	enum class Kind {include, none, identifier, number, plus, semicolon, eof, lpar, rpar, lbrack, rbrack, lbrace, rbrace, comma, minus, times, nninteger, real, qreg, creg, ugate, rxgate, rzgate, cxgate, gate, pi, measure, openqasm, probabilities, sin, cos, tan, exp, ln, sqrt, div, power, string, gt, barrier, opaque, _if, eq, reset, snapshot};$/;"	m	class:Token::Kind
qregs	QASMparser.h	/^	std::map<std::string, std::pair<int ,int> > qregs;$/;"	m	class:QASMparser
rbrace	QASMtoken.hpp	/^	enum class Kind {include, none, identifier, number, plus, semicolon, eof, lpar, rpar, lbrack, rbrack, lbrace, rbrace, comma, minus, times, nninteger, real, qreg, creg, ugate, rxgate, rzgate, cxgate, gate, pi, measure, openqasm, probabilities, sin, cos, tan, exp, ln, sqrt, div, power, string, gt, barrier, opaque, _if, eq, reset, snapshot};$/;"	m	class:Token::Kind
rbrack	QASMtoken.hpp	/^	enum class Kind {include, none, identifier, number, plus, semicolon, eof, lpar, rpar, lbrack, rbrack, lbrace, rbrace, comma, minus, times, nninteger, real, qreg, creg, ugate, rxgate, rzgate, cxgate, gate, pi, measure, openqasm, probabilities, sin, cos, tan, exp, ln, sqrt, div, power, string, gt, barrier, opaque, _if, eq, reset, snapshot};$/;"	m	class:Token::Kind
readName	QASMscanner.cpp	/^void QASMscanner::readName(Token& t) {$/;"	f	class:QASMscanner
readNumber	QASMscanner.cpp	/^void QASMscanner::readNumber(Token& t) {$/;"	f	class:QASMscanner
readString	QASMscanner.cpp	/^void QASMscanner::readString(Token& t) {$/;"	f	class:QASMscanner
real	QASMtoken.hpp	/^	enum class Kind {include, none, identifier, number, plus, semicolon, eof, lpar, rpar, lbrack, rbrack, lbrace, rbrace, comma, minus, times, nninteger, real, qreg, creg, ugate, rxgate, rzgate, cxgate, gate, pi, measure, openqasm, probabilities, sin, cos, tan, exp, ln, sqrt, div, power, string, gt, barrier, opaque, _if, eq, reset, snapshot};$/;"	m	class:Token::Kind
reset	QASMtoken.hpp	/^	enum class Kind {include, none, identifier, number, plus, semicolon, eof, lpar, rpar, lbrack, rbrack, lbrace, rbrace, comma, minus, times, nninteger, real, qreg, creg, ugate, rxgate, rzgate, cxgate, gate, pi, measure, openqasm, probabilities, sin, cos, tan, exp, ln, sqrt, div, power, string, gt, barrier, opaque, _if, eq, reset, snapshot};$/;"	m	class:Token::Kind
results	run.py	/^        results = manager.list()$/;"	v
rpar	QASMtoken.hpp	/^	enum class Kind {include, none, identifier, number, plus, semicolon, eof, lpar, rpar, lbrack, rbrack, lbrace, rbrace, comma, minus, times, nninteger, real, qreg, creg, ugate, rxgate, rzgate, cxgate, gate, pi, measure, openqasm, probabilities, sin, cos, tan, exp, ln, sqrt, div, power, string, gt, barrier, opaque, _if, eq, reset, snapshot};$/;"	m	class:Token::Kind
rxgate	QASMtoken.hpp	/^	enum class Kind {include, none, identifier, number, plus, semicolon, eof, lpar, rpar, lbrack, rbrack, lbrace, rbrace, comma, minus, times, nninteger, real, qreg, creg, ugate, rxgate, rzgate, cxgate, gate, pi, measure, openqasm, probabilities, sin, cos, tan, exp, ln, sqrt, div, power, string, gt, barrier, opaque, _if, eq, reset, snapshot};$/;"	m	class:Token::Kind
rzgate	QASMtoken.hpp	/^	enum class Kind {include, none, identifier, number, plus, semicolon, eof, lpar, rpar, lbrack, rbrack, lbrace, rbrace, comma, minus, times, nninteger, real, qreg, creg, ugate, rxgate, rzgate, cxgate, gate, pi, measure, openqasm, probabilities, sin, cos, tan, exp, ln, sqrt, div, power, string, gt, barrier, opaque, _if, eq, reset, snapshot};$/;"	m	class:Token::Kind
s1	run.py	/^    s1 = '%-14s' % benchResult[0][0]$/;"	v
s2	run.py	/^    s2 = '%7s' % benchResult[1][0]$/;"	v
s3	run.py	/^    s3 = '%7s' % benchResult[1][1]$/;"	v
s4	run.py	/^    s4 = '%7s' % benchResult[2][0]  #CNOT$/;"	v
s5	run.py	/^    s5 = '%7s' % benchResult[2][1]  #RunTime$/;"	v
s_beta	run.py	/^    s_beta  = '%4s' % benchResult[0][2]$/;"	v
scan	QASMparser.cpp	/^void QASMparser::scan() {$/;"	f	class:QASMparser
scanner	QASMparser.h	/^	QASMscanner* scanner;$/;"	m	class:QASMparser
semicolon	QASMtoken.hpp	/^	enum class Kind {include, none, identifier, number, plus, semicolon, eof, lpar, rpar, lbrack, rbrack, lbrace, rbrace, comma, minus, times, nninteger, real, qreg, creg, ugate, rxgate, rzgate, cxgate, gate, pi, measure, openqasm, probabilities, sin, cos, tan, exp, ln, sqrt, div, power, string, gt, barrier, opaque, _if, eq, reset, snapshot};$/;"	m	class:Token::Kind
setsource	graph.cpp	/^void Qcircuit::Edge::setsource(Node* source) { this->source = source; }$/;"	f	class:Qcircuit::Edge
settarget	graph.cpp	/^void Qcircuit::Edge::settarget(Node* target) { this->target = target; }$/;"	f	class:Qcircuit::Edge
setweight	graph.cpp	/^void Qcircuit::Edge::setweight(int weight) { this->weight = weight; }$/;"	f	class:Qcircuit::Edge
setweight	graph.cpp	/^void Qcircuit::Node::setweight(int weight) { this->weight = weight; }$/;"	f	class:Qcircuit::Node
sign	QASMparser.h	/^		enum class Kind {number, plus, minus, sign, times, sin, cos, tan, exp, ln, sqrt, div, power, id};$/;"	m	class:QASMparser::Expr::Kind
sin	QASMparser.h	/^		enum class Kind {number, plus, minus, sign, times, sin, cos, tan, exp, ln, sqrt, div, power, id};$/;"	m	class:QASMparser::Expr::Kind
sin	QASMtoken.hpp	/^	enum class Kind {include, none, identifier, number, plus, semicolon, eof, lpar, rpar, lbrack, rbrack, lbrace, rbrace, comma, minus, times, nninteger, real, qreg, creg, ugate, rxgate, rzgate, cxgate, gate, pi, measure, openqasm, probabilities, sin, cos, tan, exp, ln, sqrt, div, power, string, gt, barrier, opaque, _if, eq, reset, snapshot};$/;"	m	class:Token::Kind
skipComment	QASMscanner.cpp	/^void QASMscanner::skipComment() {$/;"	f	class:QASMscanner
source	circuit.h	/^        Node* source;$/;"	m	struct:Qcircuit::Edge
sqrt	QASMparser.h	/^		enum class Kind {number, plus, minus, sign, times, sin, cos, tan, exp, ln, sqrt, div, power, id};$/;"	m	class:QASMparser::Expr::Kind
sqrt	QASMtoken.hpp	/^	enum class Kind {include, none, identifier, number, plus, semicolon, eof, lpar, rpar, lbrack, rbrack, lbrace, rbrace, comma, minus, times, nninteger, real, qreg, creg, ugate, rxgate, rzgate, cxgate, gate, pi, measure, openqasm, probabilities, sin, cos, tan, exp, ln, sqrt, div, power, string, gt, barrier, opaque, _if, eq, reset, snapshot};$/;"	m	class:Token::Kind
start_clock	mymeasure.cpp	/^void CMeasure::start_clock(){$/;"	f	class:CMeasure
statevector	QASMparser.h	/^		std::string* statevector;$/;"	m	class:QASMparser::Snapshot
stop_clock	mymeasure.cpp	/^void CMeasure::stop_clock(string task){$/;"	f	class:CMeasure
str	QASMtoken.hpp	/^	std::string str;$/;"	m	class:Token
streams	QASMscanner.hpp	/^  	std::stack<std::istream*> streams;$/;"	m	class:QASMscanner
string	QASMtoken.hpp	/^	enum class Kind {include, none, identifier, number, plus, semicolon, eof, lpar, rpar, lbrack, rbrack, lbrace, rbrace, comma, minus, times, nninteger, real, qreg, creg, ugate, rxgate, rzgate, cxgate, gate, pi, measure, openqasm, probabilities, sin, cos, tan, exp, ln, sqrt, div, power, string, gt, barrier, opaque, _if, eq, reset, snapshot};$/;"	m	class:Token::Kind
sym	QASMparser.h	/^	Token::Kind sym = Token::Kind::none;$/;"	m	class:QASMparser
t	QASMparser.h	/^	Token la,t;$/;"	m	class:QASMparser
tan	QASMparser.h	/^		enum class Kind {number, plus, minus, sign, times, sin, cos, tan, exp, ln, sqrt, div, power, id};$/;"	m	class:QASMparser::Expr::Kind
tan	QASMtoken.hpp	/^	enum class Kind {include, none, identifier, number, plus, semicolon, eof, lpar, rpar, lbrack, rbrack, lbrace, rbrace, comma, minus, times, nninteger, real, qreg, creg, ugate, rxgate, rzgate, cxgate, gate, pi, measure, openqasm, probabilities, sin, cos, tan, exp, ln, sqrt, div, power, string, gt, barrier, opaque, _if, eq, reset, snapshot};$/;"	m	class:Token::Kind
target	QASMparser.h	/^		std::string target;$/;"	m	class:QASMparser::CXgate
target	QASMparser.h	/^		std::string target;$/;"	m	class:QASMparser::RXgate
target	QASMparser.h	/^		std::string target;$/;"	m	class:QASMparser::RZgate
target	QASMparser.h	/^		std::string target;$/;"	m	class:QASMparser::Ugate
target	circuit.h	/^        Node* target;$/;"	m	struct:Qcircuit::Edge
target	circuit.h	/^        int control, target;                \/\/logical qubits \/\/if single qubit control = -1$/;"	m	struct:Qcircuit::Gate
tasks	mymeasure.h	/^        vector<string>      tasks;$/;"	m	class:CMeasure
theta	QASMparser.h	/^		Expr* theta;$/;"	m	class:QASMparser::RXgate
theta	QASMparser.h	/^		Expr* theta;$/;"	m	class:QASMparser::RZgate
theta	QASMparser.h	/^		Expr* theta;$/;"	m	class:QASMparser::Ugate
timeStor	mymeasure.h	/^		dense_hash_map<string, double> timeStor;$/;"	m	class:CMeasure
timeTmpStor	mymeasure.h	/^		dense_hash_map<string, double> timeTmpStor;$/;"	m	class:CMeasure
times	QASMparser.h	/^		enum class Kind {number, plus, minus, sign, times, sin, cos, tan, exp, ln, sqrt, div, power, id};$/;"	m	class:QASMparser::Expr::Kind
times	QASMtoken.hpp	/^	enum class Kind {include, none, identifier, number, plus, semicolon, eof, lpar, rpar, lbrack, rbrack, lbrace, rbrace, comma, minus, times, nninteger, real, qreg, creg, ugate, rxgate, rzgate, cxgate, gate, pi, measure, openqasm, probabilities, sin, cos, tan, exp, ln, sqrt, div, power, string, gt, barrier, opaque, _if, eq, reset, snapshot};$/;"	m	class:Token::Kind
type	circuit.h	/^        GATETYPE type;$/;"	m	struct:Qcircuit::Gate
ugate	QASMtoken.hpp	/^	enum class Kind {include, none, identifier, number, plus, semicolon, eof, lpar, rpar, lbrack, rbrack, lbrace, rbrace, comma, minus, times, nninteger, real, qreg, creg, ugate, rxgate, rzgate, cxgate, gate, pi, measure, openqasm, probabilities, sin, cos, tan, exp, ln, sqrt, div, power, string, gt, barrier, opaque, _if, eq, reset, snapshot};$/;"	m	class:Token::Kind
val	QASMtoken.hpp	/^	int val;$/;"	m	class:Token
valReal	QASMtoken.hpp	/^	double valReal;$/;"	m	class:Token
wbegin	mymeasure.h	/^        double 				wbegin;$/;"	m	class:CMeasure
weight	circuit.h	/^        int weight;$/;"	m	struct:Qcircuit::Edge
weight	circuit.h	/^        int weight;$/;"	m	struct:Qcircuit::Node
welapsed_secs	mymeasure.h	/^        vector<double>      welapsed_secs, celapsed_secs;$/;"	m	class:CMeasure
write_output	outputwriter.cpp	/^void Qcircuit::QMapper::write_output(Circuit& graph)$/;"	f	class:Qcircuit::QMapper
~Expr	QASMparser.h	/^		~Expr() {$/;"	f	class:QASMparser::Expr
~QASMparser	QASMparser.cpp	/^QASMparser::~QASMparser() {$/;"	f	class:QASMparser
~RXgate	QASMparser.h	/^		~RXgate() {$/;"	f	class:QASMparser::RXgate
~RZgate	QASMparser.h	/^		~RZgate() {$/;"	f	class:QASMparser::RZgate
~Snapshot	QASMparser.h	/^		~Snapshot() {$/;"	f	class:QASMparser::Snapshot
~Ugate	QASMparser.h	/^		~Ugate() {$/;"	f	class:QASMparser::Ugate
